<?xml version="1.0" ?>
<project name="JadeAndroid" default="dist">
    <property file="build.properties" />	
    <property name="android-tools" value="${android-sdk-folder}/tools" />
    <property name="leap-home-dir" value="${jade-home-dir}/leap" />
    
    <!-- Input directories -->
    <property name="resource-dir" value="res" />
    <property name="asset-dir" value="assets" />
    <property name="srcdir" value="src" />

    <!-- Output directories -->
    <property name="lib" value="lib" />
    <property name="classes" value="classes" />

    <!-- Create R.java in the source directory -->
    <property name="outdir-r" value="src" />

    <!-- Intermediate files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${lib}/${dex-file}" />

    <!-- The final package file to generate -->
    <property name="out-package" value="${lib}/${ant.project.name}.apk" />
    <property name="addon-name" value="../${ant.project.name}AddOn.zip" />

    <!-- Tools -->
    <property name="aapt" value="${android-tools}/aapt.exe" />
    <property name="aidl" value="${android-tools}/aidl.exe" />
    <property name="dx" value="${android-tools}/dx.bat" />
    <property name="android-jar" value="${android-sdk-folder}/android.jar" />
    
    <!-- Create the output directories if they don't exist yet. -->
    <target name="dirs">
 	<delete dir="${lib}" />   
        <delete dir="${classes}" />   
        <mkdir dir="${lib}" />
        <mkdir dir="${classes}" />
    </target>

    <!-- Generate the R.java file for this project's resources. -->
    <target name="resource-src" depends="dirs">
        <echo>Generating R.java...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="compile" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${outdir-r}" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
    </target>

    <!-- FIXME: a cosa serve -->
    <!-- Generate java classes from .aidl files. -->
    <target name="aidl" depends="dirs">
        <apply executable="${aidl}" failonerror="true">
            <fileset dir="${srcdir}">
                <include name="**/*.aidl"/>
            </fileset>
        </apply>
    </target>

    <!-- Compile this project's .java files into .class files. -->
    <target name="compile" depends="dirs, resource-src, aidl, compile-leap-pjava">
        <javac encoding="ascii" target="1.5" debug="true" extdirs=""
                srcdir="."
                destdir="${classes}"
                bootclasspath="${android-jar}">
          <classpath>
            <fileset dir="${leap-home-dir}/pjava/lib" >
              <include name="*.jar"/>
            </fileset>
          </classpath>
        </javac>
    </target>
    
    <!-- compile JadeLeap for pjava -->
    <target name="compile-leap-pjava">
    	<ant dir="${leap-home-dir}" target="rebuild" inheritAll="false">
    	  <property name="pjava" value="true"/>
    	  <property name="root" value="${leap-home-dir}"/>
    	</ant>
    	<unjar src="${leap-home-dir}/pjava/lib/JadeLeap.jar" dest="${classes}" />
    	<javac target="1.5" srcdir="${jade-home-dir}/src" destdir="${classes}" classpath="${classes}" includes="jade/wrapper/gateway/GatewayBehaviour.java" />
    </target>

    <!-- Convert this project's .class files into .dex files. -->
    <target name="dex" depends="compile">
        <exec executable="${dx}" failonerror="true">
            <arg value="--dex" />
            <arg value="--output=${basedir}\${intermediate-dex}" />
            <arg value="--locals=full" />
            <arg value="--positions=lines" />
            <arg path="${basedir}\${classes}" />
        </exec>
    </target>

    <!-- Put the project's resources into the output package file. -->
    <target name="package-res-and-assets">
        <echo>Packaging resources and assets...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-c" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-A" />
            <arg value="${asset-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="${out-package}" />
        </exec>
    </target>

    <!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
    <target name="package-res-no-assets">
        <echo>Packaging resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-c" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <!-- No assets directory -->
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="${out-package}" />
        </exec>
    </target>

    <!-- Invoke the proper target depending on whether or not
         an assets directory is present. -->
    <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
         only when the assets dir exists. -->
    <target name="package-res">
        <available file="${asset-dir}" type="dir"
                property="res-target" value="and-assets" />
        <property name="res-target" value="no-assets" />
        <antcall target="package-res-${res-target}" />
    </target>

    <!-- Put the project's .class files into the output package file. -->
    <target name="package-java" depends="compile, package-res">
        <echo>Packaging java...</echo>
        <jar destfile="${out-package}"
                basedir="${classes}"
                update="true" />
    </target>

    <!-- Put the project's .dex files into the output package file. -->
    <target name="package-dex" depends="dex, package-res">
        <echo>Packaging dex...</echo>
        <zip destfile="${out-package}.tmp">
            <zipfileset file="${intermediate-dex}" fullpath="${dex-file}" />
            <zipfileset src="${out-package}" />
        </zip>
    	<move file="${out-package}.tmp" tofile="${out-package}" />
    </target>

    <!-- Create the package file for this project from the sources. -->
    <target name="package" depends="package-dex" />
    
    <target name="dist" depends="package">
     <echo>Create distribution files for Jade Android Add-on</echo>
     <!-- FIXME: dobbiamo distribuire anche i classes.dex ? -->
     <zip destfile="${addon-name}" basedir="../..">
       <include name="add-ons/android/*"/>
       <include name="add-ons/android/src/**"/>
       <include name="add-ons/android/doc/**"/>
       <include name="add-ons/android/lib/**"/>
       <include name="add-ons/android/res/**"/>     
     </zip>
    </target>
</project>
