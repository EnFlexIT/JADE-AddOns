options {
    FORCE_LA_CHECK = true;
    ERROR_REPORTING = true;
//    UNICODE_INPUT = true;
    IGNORE_CASE = true;
}

PARSER_BEGIN(SLParser)

package jade.semantics.lang.sl.parser;

import jade.semantics.lang.sl.grammar.*;
import jade.semantics.lang.sl.grammar.operations.*;

//=============================================================
//                      Parser declaration
//=============================================================
public class SLParser 
{
  static final String META_EXCEPTION_MESSAGE            = "Meta SL expressions are not allowed";
  static final String INVALID_PREDICATE_MESSAGE         = "Invalid predicate";
  static final String INVALID_REFERENCE_CONTEXT_MESSAGE = "Invalid context for reference";

  static final int FUNCTIONNAL_TERM                     = 0;
  static final int PREDICATE                            = 1;

  static final int CONTENT_EXPRESSION_REFERENCE         = 0;
  static final int FORMULA_REFERENCE                    = 1;
  static final int SYMBOL_REFERENCE                     = 2;
  static final int TERM_REFERENCE                       = 3;
  static final int VARIABLE_REFERENCE                   = 4;
  
  static public final java.text.SimpleDateFormat DATE_FORMAT = new java.text.SimpleDateFormat("yyyyMMdd'T'HHmmssSSS");

  //------------------------------------------------------------
  // SLParser is a singleton
  //------------------------------------------------------------
  static SLParser _instance = null;

  static public SLParser getParser() 
  {
      if ( _instance == null ) {
	  _instance = new SLParser();
      }
      return _instance;
  }

  //------------------------------------------------------------
  // SLParser as a SLParser
  //------------------------------------------------------------
  boolean _extented = false;

  public SLParser()
  {
      this(new java.io.InputStreamReader(System.in));
  }

  public synchronized Content parseContent(java.io.Reader stream, boolean extented) 
      throws ParseException
  //------------------------------------------------------------
  {
      ReInit(stream);
      _extented = extented;
      return Content();	
  }

  public synchronized Content parseContent(java.io.Reader stream) 
      throws ParseException
  //------------------------------------------------------------
  {
      return parseContent(stream, false);	
  }

  public synchronized Content parseContent(String content, boolean extented) 
      throws ParseException
  //------------------------------------------------------------
  {
      return parseContent(new java.io.StringReader(content), extented);
  }

  public synchronized Content parseContent(String content) 
      throws ParseException
  //------------------------------------------------------------
  {
      return parseContent(new java.io.StringReader(content));
  }

  public synchronized FunctionalTerm parseAgent(java.io.Reader stream, boolean extented) 
      throws ParseException
  //------------------------------------------------------------
  {
      ReInit(stream);
      _extented = extented;
      return (FunctionalTerm)FunctionalTermOrPredicate(FUNCTIONNAL_TERM);
  }

  public synchronized FunctionalTerm parseAgent(java.io.Reader stream) 
      throws ParseException
  //------------------------------------------------------------
  {
	return parseAgent(stream, false);
  }	

  public synchronized FunctionalTerm parseAgent(String term, boolean extented) 
      throws ParseException
  //------------------------------------------------------------
  {
	return parseAgent(new java.io.StringReader(term), extented);
  }

  public synchronized FunctionalTerm parseAgent(String term) 
      throws ParseException
  //------------------------------------------------------------
  {
	return parseAgent(new java.io.StringReader(term));
  }

  public synchronized Term parseTerm(java.io.Reader stream, boolean extented) 
      throws ParseException
  //------------------------------------------------------------
  {
      ReInit(stream);
      _extented = extented;
      return Term();
  }

  public synchronized Term parseTerm(java.io.Reader stream) 
      throws ParseException
  //------------------------------------------------------------
  {
      return parseTerm(stream, false);
  }

  public synchronized Term parseTerm(String term, boolean extented) 
      throws ParseException
  //------------------------------------------------------------
  {
      return parseTerm(new java.io.StringReader(term), extented);
  }

  public synchronized Term parseTerm(String term) 
      throws ParseException
  //------------------------------------------------------------
  {
      return parseTerm(new java.io.StringReader(term));
  }

  public synchronized Formula parseFormula(java.io.Reader stream, boolean extented) 
      throws ParseException
  //------------------------------------------------------------
  {
      ReInit(stream);
      _extented = extented;
      return Formula();
  }

  public synchronized Formula parseFormula(java.io.Reader stream) 
      throws ParseException
  //------------------------------------------------------------
  {
      return parseFormula(stream, false);
  }

  public synchronized Formula parseFormula(String formula, boolean extented) 
      throws ParseException
  //------------------------------------------------------------
  {
      return parseFormula(new java.io.StringReader(formula), extented);
  }

  public synchronized Formula parseFormula(String formula) 
      throws ParseException
  //------------------------------------------------------------
  {
      return parseFormula(new java.io.StringReader(formula));
  }

}

PARSER_END(SLParser)

//=============================================================
//                        Token declaration
//=============================================================
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : 
{ 
  < #AOP : (" "|"\t"|"\n"|"(") >
| < OPEN_BRACKET:       "(" (" "|"\t"|"\n")* >
| < CLOSE_BRACKET:      (" "|"\t"|"\n")* ")" >
| < PIPEKW: 		    <OPEN_BRACKET> "|" > 
| < EQUALSKW: 		    <OPEN_BRACKET> "=" >
| < SEMICOLONKW: 	    <OPEN_BRACKET> ";" >
| < METAPIPEKW:   	    <OPEN_BRACKET> "::|" >
| < METAOPTIONKW:       <OPEN_BRACKET> "::?" >
| < BELIEVEKW: 		    <OPEN_BRACKET> "b"        <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < UNCERTAINTYKW: 	    <OPEN_BRACKET> "u"        <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < INTENTIONKW: 	    <OPEN_BRACKET> "i"        <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < PERSISTENTGOALKW: 	<OPEN_BRACKET> "pg"       <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < ORKW: 		        <OPEN_BRACKET> "or"       <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < ANDKW: 		        <OPEN_BRACKET> "and"      <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < NOTKW: 		        <OPEN_BRACKET> "not"      <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < SETKW: 		        <OPEN_BRACKET> "set"  >    /* <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);} */
| < ALLKW: 	         	<OPEN_BRACKET> "all"      <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < ANYKW: 	        	<OPEN_BRACKET> "any"      <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < IOTAKW: 	    	<OPEN_BRACKET> "iota"     <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < SOMEKW: 	    	<OPEN_BRACKET> "some"     <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < DONEKW: 	    	<OPEN_BRACKET> "done"     <AOP> >  {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < TRUEKW: 	        "true" >
| < EQUIVKW: 		    <OPEN_BRACKET> "equiv"    <AOP> > {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < FALSEKW: 		    "false" >
| < ACTIONKW: 		    <OPEN_BRACKET> "action"   <AOP> > {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < RESULTKW: 		    <OPEN_BRACKET> "result"   <AOP> > {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < EXISTSKW: 		    <OPEN_BRACKET> "exists"   <AOP> > {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < FORALLKW: 		    <OPEN_BRACKET> "forall"   <AOP> > {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < IMPLIESKW: 		    <OPEN_BRACKET> "implies"  <AOP> > {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < FEASIBLEKW: 	    <OPEN_BRACKET> "feasible" <AOP> > {if (matchedToken.image.endsWith("(")) input_stream.backup(1);}
| < SEQUENCEKW: 	    <OPEN_BRACKET> "sequence" > /* <AOP> > {if (matchedToken.image.endsWith("(")) input_stream.backup(1);} */
}

TOKEN : /* VARIABLE and PARAMETER NAME */
{
  < PARAMETER_NAME: ":"(<STRING_LITERAL>|<BYTES>|<WORD>) >
| < VARIABLE: "?"(<STRING_LITERAL>|<BYTES>|<WORD>) >
| < META_VARIABLE: "??"<WORD> >
}

TOKEN : /* INTEGER */
{
  < INTEGER: ((<SIGN>)?(<DEC_LITERAL>)+)|((<SIGN>)?"0"["x","X"](<HEX_LITERAL>)+) >
| < #SIGN: ["+","-"] >
| < #HEX_LITERAL: ["0"-"9","A"-"F","a"-"f"] >
}

TOKEN : /* FLOAT */
{
  < FLOAT: ((<SIGN>)?<MANTISSA>(<EXPONENT>)?)|((<SIGN>)?(<DEC_LITERAL>)+<EXPONENT>) >
| < #MANTISSA: ((<DEC_LITERAL>)+"."(<DEC_LITERAL>)*)|((<DEC_LITERAL>)*"."(<DEC_LITERAL>)+) >
| < #EXPONENT:(["e","E"])(<SIGN>)?(<DEC_LITERAL>)+ >
}

TOKEN : /* DATE_TIME */
{
  < DATE_TIME: (<SIGN>)?<YEAR><MONTH><DAY>"T"<HOUR><MINUTE><SECOND><MILLISECOND>(<TYPE_DESIGNATOR>)? >
| < #YEAR: <DEC_LITERAL><DEC_LITERAL><DEC_LITERAL><DEC_LITERAL> >
| < #MONTH: <DEC_LITERAL><DEC_LITERAL> >
| < #DAY: <DEC_LITERAL><DEC_LITERAL> >
| < #HOUR: <DEC_LITERAL><DEC_LITERAL> >
| < #MINUTE: <DEC_LITERAL><DEC_LITERAL> >
| < #SECOND: <DEC_LITERAL><DEC_LITERAL> >
| < #MILLISECOND: <DEC_LITERAL><DEC_LITERAL><DEC_LITERAL> >
| < #TYPE_DESIGNATOR: ["a"-"z","A"-"Z"] >
}

TOKEN : /* STRING */
{
  < STRING_LITERAL: "\""( ~["\""]|"\\\"")* "\"" >
| < WORD:  ~["\u0000"-"\u0020","\"", "(", ")", "#", "0" - "9", ":", "-", "?"](~["\u0000"-"\u0020","\"", "(", ")"])* >
| < BYTES:  "#"(<DEC_LITERAL>)+"\"" >
| < #DEC_LITERAL: ["0"-"9"] >
}

//=============================================================
//                       Rules declaration
//=============================================================

// -------------------------------------------------------------
Content Content() : 
// -------------------------------------------------------------
{
    ContentNode content = new ContentNode(new ListOfContentExpression());
    ContentExpression expression;
}
{
  ( <OPEN_BRACKET> ( expression = ContentExpression ()
           {
             content.as_expressions().add(expression);
           } ) +
    <CLOSE_BRACKET> )
  {
	return content;
  }
}

// -------------------------------------------------------------
ContentExpression ContentExpression() : 
// -------------------------------------------------------------
{
    ActionExpression action_expression;
    IdentifyingExpression identifying_expression;
    Formula formula;
    Node meta;
}
{ (  meta = MetaVariable(CONTENT_EXPRESSION_REFERENCE) 
     {
	   return (MetaContentExpressionReferenceNode)meta;
     }
   | 
     action_expression = ActionExpression()
     {
	    return new ActionContentExpressionNode(action_expression);
     } 
   | identifying_expression = IdentifyingExpression()
     {
        return new IdentifyingContentExpressionNode(identifying_expression);
     } 
   |
     formula = Formula()
     {
	    return new FormulaContentExpressionNode(formula);
	 }
  )
}

// -------------------------------------------------------------
ActionExpression ActionExpression() :
// -------------------------------------------------------------
{
    Term left_action;
    Term right_action;
    Term agent;
    Term term;
}
{  ( ( <ACTIONKW> agent = Term() term = Term() <CLOSE_BRACKET>
     {
         return new ActionExpressionNode(agent, term);
     })
   | ( <PIPEKW> left_action = Term() right_action = Term() <CLOSE_BRACKET>
     {
        return new AlternativeActionExpressionNode(left_action, right_action);
     }) 
   | ( <SEMICOLONKW> left_action = Term() right_action = Term() <CLOSE_BRACKET>
     {
        return new SequenceActionExpressionNode(left_action, right_action);
     }) 
   )
}

// -------------------------------------------------------------
IdentifyingExpression IdentifyingExpression() :
// -------------------------------------------------------------
{
    IdentifyingExpression identifying_expression;
    Term term;
    Formula formula;
}
{  (  ( <IOTAKW> term = Term() formula = Formula() <CLOSE_BRACKET>
       {
          return new IotaNode(term, formula);
       })
    | ( <ALLKW> term = Term() formula = Formula() <CLOSE_BRACKET>
       {
          return new AllNode(term, formula);
       })
    | ( <ANYKW> term = Term() formula = Formula() <CLOSE_BRACKET>
       {
          return new AnyNode(term, formula);
       }) 
       
    | ( <SOMEKW> term = Term() formula = Formula() <CLOSE_BRACKET>
       {
          return new SomeNode(term, formula);
       }) 
    )
}

// -------------------------------------------------------------
Formula Formula() :
// -------------------------------------------------------------
{
    AtomicFormula atomic_formula;
    Term action;
    Formula formula = null;
    Formula left_formula;
    Formula right_formula;
    Term agent;
    Variable variable;
    Node meta;
}
{  ( meta = MetaVariable(FORMULA_REFERENCE) 
     {
	   return (MetaFormulaReferenceNode)meta;
     }
   | atomic_formula = AtomicFormula()
     {
	     return atomic_formula;
     } 
   | ( <DONEKW> action = Term() ( formula = Formula() ) ? <CLOSE_BRACKET>
     {
        return new DoneNode(action, formula==null?new TrueNode():formula);
     } )
   | ( <FEASIBLEKW> action = Term() ( formula = Formula() ) ? <CLOSE_BRACKET>
     {
        return new FeasibleNode(action, formula==null?new TrueNode():formula);
     } )
   | ( <NOTKW> formula = Formula() <CLOSE_BRACKET>
     {
        return new NotNode(formula);
     } )
   | ( <ANDKW> left_formula = Formula() right_formula = Formula() <CLOSE_BRACKET>
     {
        return new AndNode(left_formula, right_formula);
     } )
   | ( <ORKW> left_formula = Formula() right_formula = Formula() <CLOSE_BRACKET>
     {
        return new OrNode(left_formula, right_formula);
     } )
   | ( <IMPLIESKW> left_formula = Formula() right_formula = Formula() <CLOSE_BRACKET>
     {
        return new ImpliesNode(left_formula, right_formula);
     } )
   | ( <EQUIVKW> left_formula = Formula() right_formula = Formula() <CLOSE_BRACKET>
     {
        return new EquivNode(left_formula, right_formula);
     } )
   | ( <EXISTSKW> variable = Variable() formula = Formula() <CLOSE_BRACKET>
     {
        return new ExistsNode(variable, formula);
     } )
   | ( <FORALLKW> variable = Variable() formula = Formula() <CLOSE_BRACKET>
     {
        return new ForallNode(variable, formula);
     } )
   | ( <BELIEVEKW> agent = Term() formula = Formula() <CLOSE_BRACKET>
     {
        return new BelieveNode(agent, formula);
     } )
   | ( <UNCERTAINTYKW> agent = Term() formula = Formula() <CLOSE_BRACKET>
     {
        return new UncertaintyNode(agent, formula);
     } )
   | ( <INTENTIONKW> agent = Term() formula = Formula() <CLOSE_BRACKET>
     {
        return new IntentionNode(agent, formula);
     } )
   | ( <PERSISTENTGOALKW> agent = Term() formula = Formula() <CLOSE_BRACKET>
     {
        return new PersistentGoalNode(agent, formula);
     } )
  )
}

// -------------------------------------------------------------
AtomicFormula AtomicFormula() :
// -------------------------------------------------------------
{
    AtomicFormula atomic_formula;
    Node predicate;
    ListOfTerm terms;
    Symbol symbol;
    Term term1, term2;
}
{  ( symbol = Symbol()
     {
        return new PropositionSymbolNode(symbol);
     } 
   | ( <RESULTKW> term1 = Term() term2 = Term() <CLOSE_BRACKET>
     {
        return new ResultNode(term1, term2);
     })
   | ( <EQUALSKW> term1 = Term() term2 = Term() <CLOSE_BRACKET>
     {
        return new EqualsNode(term1, term2);
     })
   | ( predicate = FunctionalTermOrPredicate(PREDICATE)
     {
        return (PredicateNode)predicate;
     })
   | ( <TRUEKW>
     {
        TrueNode trueNode = new TrueNode();
        trueNode.sm_simplified_formula(trueNode);
        return trueNode;
     })
   | ( <FALSEKW>
     {
        FalseNode falseNode = new FalseNode();
        falseNode.sm_simplified_formula(falseNode);
        return falseNode;
     })
  )
}

// -------------------------------------------------------------
ListOfTerm Terms() :
// -------------------------------------------------------------
{
    ListOfTerm terms = new ListOfTerm();
    Term term;
}
{  ( term = Term()
     {
        terms.add(term);
     } )+
    {
       return terms;
    }
}

// -------------------------------------------------------------
Symbol Symbol() :
// -------------------------------------------------------------
{
    java.lang.String symbolName;
    Node meta;
}
{  ( meta = MetaVariable(SYMBOL_REFERENCE) 
     {
	 return (MetaSymbolReferenceNode)meta;
     } 
   | symbolName = String()
     {
        return new SymbolNode(symbolName);
     } 
   )
}

// -------------------------------------------------------------
Term Term() :
// -------------------------------------------------------------
{
    Constant constant;
    TermSet term_set;
    TermSequence term_sequence;
    Node functional_term;
    ActionExpression action_expression;
    IdentifyingExpression identifying_expression;
    Variable variable;
    Node meta;
}
{  ( meta = MetaVariable(TERM_REFERENCE) 
     {
	 return (MetaTermReferenceNode)meta;
     } 
   | constant = Constant()
     {
        return constant;
     } 
   | term_set = TermSet()
     {
        return term_set;
     }
   | term_sequence = TermSequence()
     {
        return term_sequence;
     }
   | functional_term = FunctionalTermOrPredicate(FUNCTIONNAL_TERM)
     {
        return (FunctionalTerm)functional_term;
     }
   | action_expression = ActionExpression()
     {
	    return action_expression;
     } 
   | identifying_expression = IdentifyingExpression()
     {
        return identifying_expression;
     } 
   | variable = Variable()
     {
	     return variable;
     } 
   )
}

// -------------------------------------------------------------
Constant Constant() :
// -------------------------------------------------------------
{
    Token token;
}
{  ( token = <STRING_LITERAL>
     {
        String s = token.image.substring(1,token.image.length()-1);
	String value = new String();
	for (int i=0; i<s.length(); i++) {
	    if ( i<s.length()-1 &&
	         s.charAt(i) == '\\' && 
	         (s.charAt(i+1) == '\"' || s.charAt(i+1) == '\\' ) ) {
		i++;
	    }
	    value += s.charAt(i);
	}
	return new StringConstantNode(value);
     } 
   | token = <WORD>
     {
        return new WordConstantNode(token.image);
     } 
   | token = <BYTES>
     {
        int n = Integer.parseInt(token.image.substring(1, token.image.length()-1));
		char[] chars = new char[n];	
		try {
			  for (int i=0; i<n;i++) {chars[i] = jj_input_stream.readChar();}
		}
		catch(Exception e) {e.printStackTrace();}
		return new ByteConstantNode(Base64.decode(chars));
      }
   | token = <FLOAT>
     {
        return new RealConstantNode(new Double(token.image));
     }
   | token = <INTEGER>
     {
        return new IntegerConstantNode(new Long(token.image));
     }
   | token = <DATE_TIME>
     {
     	try {
         	return new DateTimeConstantNode(DATE_FORMAT.parse(token.image));
        }
        catch (Exception e) {e.printStackTrace();}
        return null;
     }
   )
}

// -------------------------------------------------------------
String String() :
// -------------------------------------------------------------
{
    Token token;
}
{  ( token = <STRING_LITERAL>
     {
	return token.image;
     } 
    | token = <BYTES>
     {
	return token.image;
     } 
    | token = <WORD> 
     {
	return token.image;
     }
   )
}

// -------------------------------------------------------------
TermSet TermSet() :
// -------------------------------------------------------------
{
    ListOfTerm terms = null;
}
{  ( <SETKW> ( terms = Terms() ) ? <CLOSE_BRACKET>
     {
	 return new TermSetNode(terms==null ? new ListOfTerm() : terms);
     } )
}

// -------------------------------------------------------------
TermSequence TermSequence() :
// -------------------------------------------------------------
{
    ListOfTerm terms = null;
}
{  ( <SEQUENCEKW> ( terms = Terms() ) ? <CLOSE_BRACKET>
     {
	 return new TermSequenceNode(terms==null ? new ListOfTerm() : terms);
     } )
}

// -------------------------------------------------------------
Node FunctionalTermOrPredicate(int which) :
// -------------------------------------------------------------
{
    Symbol symbol;
    ListOfTerm terms = null;
    ListOfParameter parameters = null;
}
{  ( ( <OPEN_BRACKET> symbol = Symbol() ( terms = Terms() | parameters = Parameters() ) ? <CLOSE_BRACKET> )
     {
	if ( which == FUNCTIONNAL_TERM ) {
	    if ( terms == null ) {
			return new FunctionalTermParamNode(symbol, parameters==null ? new ListOfParameter() : parameters);
	    }
	    else {
			return new FunctionalTermNode(symbol, terms);
	    }
	}
	else /* which == PREDICATE */ {
	    if ( parameters == null ) {
			return new PredicateNode(symbol, terms==null ? new ListOfTerm() : terms);
	    }
	    else {
			throw new ParseException(INVALID_PREDICATE_MESSAGE);
	    }
	}
     } )
}

// -------------------------------------------------------------
ListOfParameter Parameters() :
// -------------------------------------------------------------
{
    ListOfParameter parameters = new ListOfParameter();
    Parameter parameter;
}
{  ( parameter = Parameter()
     {
        parameters.add(parameter);
     } )+
    {
       return parameters;
    }
}

// -------------------------------------------------------------
Parameter Parameter() :
// -------------------------------------------------------------
{
    Parameter parameter;
    Token token;
    Term term;
}
{  ( (token = <PARAMETER_NAME> term = Term() 
     {
	  return new ParameterNode(term, token.image.substring(1), Boolean.FALSE);
     }) 
     |
     (<METAOPTIONKW> token = <PARAMETER_NAME> term = Term() <CLOSE_BRACKET> 
     {
 	 	if ( !_extented ) {throw new ParseException(META_EXCEPTION_MESSAGE);}
 	 	return new ParameterNode(term, token.image.substring(1), Boolean.TRUE);
     })
   )
}

// -------------------------------------------------------------
Variable Variable() :
// -------------------------------------------------------------
{
    java.lang.String variableName;
    Node meta;
    Token token;
}
{  ( meta = MetaVariable(VARIABLE_REFERENCE) 
     {
	 return (MetaVariableReferenceNode)meta;
     }
    | token = <VARIABLE>
     {
        return new VariableNode(token.image.substring(1));
     }
   )
}

// -------------------------------------------------------------
Node MetaVariable(int which) :
// -------------------------------------------------------------
{
    Token token;
}
{  ( token = <META_VARIABLE>
     {
	 if ( !_extented ) {throw new ParseException(META_EXCEPTION_MESSAGE);}
	 if ( which == CONTENT_EXPRESSION_REFERENCE ) {
	     return new MetaContentExpressionReferenceNode(token.image.substring(2));
	 }
	 else if ( which == FORMULA_REFERENCE ) {
	     return new MetaFormulaReferenceNode(token.image.substring(2));
	 }
	 else if ( which == SYMBOL_REFERENCE ) {
	     return new MetaSymbolReferenceNode(token.image.substring(2));
	 }
	 else if ( which == TERM_REFERENCE ) {
	     return new MetaTermReferenceNode(token.image.substring(2));
	 }
	 else if ( which == VARIABLE_REFERENCE ) {
	     return new MetaVariableReferenceNode(token.image.substring(2));
	 }
	 else {
	     throw new ParseException(INVALID_REFERENCE_CONTEXT_MESSAGE);
	 }
     } )
}





