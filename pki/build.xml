<project name="JADE-PKI" default="jar" basedir=".">
  <!-- set global properties for this build -->
  <property name="projectname" value="JADE-PKI"/>
  <property name="jade-home" value="../../"/>

  <property name="shortname" value="pki"/>
  <property name="distname" value="${shortname}AddOn"/>
  <property name="version" value="1.0.1"/>

  <property name="addon-home" location="${jade-home}/add-ons/${shortname}"/>
  <property name="src" location="src"/>
  <property name="examples" value="examples"/>
  <property name="build" location="classes"/>
  <property name="doc" location="doc"/>
  <property name="lib" location="lib"/>
  <property name="jade-lib-dir" value="${jade-home}/lib"/>

  <property name="javac.optimize" value="off"/>
  <property name="javac.debug" value="on"/>

  <path id="jade-classes">
    <fileset dir="${jade-lib-dir}">
      <include name="commons-codec/commons-codec-1.3.jar"/>
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="jar" depends="lib,examples.lib" description="Compile everything and create jar" />

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the directories structure used to store files -->
    <mkdir dir="${build}"/>
    <mkdir dir="${lib}"/>
  </target>

  <!-- Compile the javadoc code from ${src} into ${doc}/api -->
  <target name="javadoc" depends="doc"/>
  <target name="doc" depends="compile">
    <mkdir dir="${doc}/api"/>
    <javadoc sourcepath="${src}"
             destdir="${doc}/api" 
             doctitle="&lt;h1>${projectname} Add-on version ${version} API&lt;/h1>"
             author="true" 
             use="true" 
	     charset="UTF-8"
             windowtitle="${projectname} classes">
      <classpath>
        <pathelement location="{build}"/>
        <path refid="jade-classes"/>
      </classpath>
    </javadoc>
  </target>

  <target name="compile" depends="init">
    <javac srcdir="${src}"
           destdir="${build}"
           nowarn="off"
           optimize="${javac.optimize}"
           debug="${javac.debug}"
           debuglevel="lines,vars,source"
		   target="1.5"
		   source="1.5"
	       deprecation="on"
	       includeantruntime="false">
      <classpath>
        <path refid="jade-classes"/>
      </classpath>
    </javac>

    <!-- Copy images if any -->
    <copy todir="${build}">
      <fileset dir="${src}">
        <include name="**/*.png"/>
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
      </fileset>
    </copy>
  </target>

  <target name="examples" depends="init">
    <javac srcdir="${examples}"
           destdir="${build}"
           nowarn="off"
           optimize="${javac.optimize}"
           debug="${javac.debug}"
           debuglevel="lines,vars,source"
           deprecation="on"
		   target="1.5"
		   source="1.5"
	       includeantruntime="false">
      <classpath>
        <pathelement location="${build}"/>
        <path refid="jade-classes"/>
      </classpath>
    </javac>
  </target>

  <target name="lib" depends="compile" description="generate jar archive">
    <jar jarfile="${lib}/${shortname}.jar">
      <fileset dir="${build}" />
    </jar>
  </target>

  <target name="examples.lib" depends="examples" description="generate examples jar archive">
    <jar jarfile="${lib}/${shortname}-examples.jar">
      <fileset dir="${build}" />
    </jar>
  </target>

  <!-- Make distribution zip file and put in the jade/add-ons directory -->
  <target name="dist" depends="clean, doc, lib">
    <delete file="../${distname}-${version}.zip" quiet="true"/>
    <zip zipfile="../${distname}-${version}.zip" basedir="${addon-home}">
      <include name="*.pdf"/>
      <include name="*.txt"/>
      <include name="*.xml"/>
      <include name="examples/**"/>
      <include name="src/**"/>
      <include name="doc/**"/>
      <include name="lib/**"/>
      <include name="tools/**"/>
    </zip>
  </target>

  <target name="clean" description="clean up">
    <!-- Delete the ${build} directory tree -->
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${build}"/>
	  <fileset dir="${lib}"/>
	  <fileset dir="${doc}/api"/>
      <fileset dir=".">
        <include name="APDescription.txt"/>
        <include name="MTPs-Main-Container.txt"/>
      </fileset>
    </delete>
  </target>
</project>
