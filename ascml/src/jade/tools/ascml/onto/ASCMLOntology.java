/*
 * Copyright (C) 2005 Chair of Computer Science 4
 * Aachen University of Technology
 *
 * Copyright (C) 2005 Dpt. of Communcation and Distributed Systems
 * University of Hamburg
 *
 * This file is part of the ASCML.
 *
 * The ASCML is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * The ASCML is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ASCML; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */


// file: ASCMLOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package jade.tools.ascml.onto;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: ASCMLOntology.java
 * @author ontology bean generator
 * @version 2005/06/29, 16:24:48
 */
public class ASCMLOntology extends jade.content.onto.Ontology implements ProtegeTools.ProtegeOntology {
   /**
    * These hashmap store a mapping from jade names to either protege names of SlotHolder 
    * containing the protege names.  And vice versa
    */  
   private HashMap jadeToProtege;

  //NAME
  public static final String ONTOLOGY_NAME = "ASCML";
  // The singleton instance of this ontology
  private static ProtegeIntrospector introspect = new ProtegeIntrospector();
  private static Ontology theInstance = new ASCMLOntology();
  public static Ontology getInstance() {
     return theInstance;
  }

   // ProtegeOntology methods
   public SlotHolder getSlotNameFromJADEName(SlotHolder jadeSlot) {
     return (SlotHolder) jadeToProtege.get(jadeSlot);
   }


   // storing the information
   private void storeSlotName(String jadeName, String javaClassName, String slotName){
       jadeToProtege.put(new SlotHolder(javaClassName, jadeName), new SlotHolder(javaClassName, slotName));
   }


   // VOCABULARY
    public static final String STOP_MODELS="Models";
    public static final String STOP="Stop";
    public static final String START_MODELS="Models";
    public static final String START="Start";
    public static final String DEBUG="Debug";
    public static final String STARTING="Starting";
    public static final String ABSMODEL_CONFIG="Config";
    public static final String ABSMODEL_NAME="Name";
    public static final String ABSMODEL_TOOLOPTIONS="ToolOptions";
    public static final String ABSMODEL_MODELSTATUS="ModelStatus";
    public static final String ABSMODEL="AbsModel";
    public static final String UNKNOWN="Unknown";
    public static final String NONFUNCTIONAL="NonFunctional";
    public static final String SOCIETYINSTANCE="SocietyInstance";
    public static final String AGENTINSTANCE="AgentInstance";
    public static final String STOPPING="Stopping";
    public static final String INTROSPECT="Introspect";
    public static final String ERROR="Error";
    public static final String TOOLOPTION_OPTIONS="Options";
    public static final String TOOLOPTION="ToolOption";
    public static final String LOG="Log";
    public static final String AGENTTYPE="AgentType";
    public static final String BENCHMARK="Benchmark";
    public static final String STATUS_DETAILEDSTATUS="DetailedStatus";
    public static final String STATUS="Status";
    public static final String SOCIETYTYPE="SocietyType";
    public static final String KNOWN="Known";
    public static final String FUNCTIONAL="Functional";
    public static final String SNIFF="Sniff";

  /**
   * Constructor
  */
  private ASCMLOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    introspect.setOntology(this);
    jadeToProtege = new HashMap();
    try { 

    // adding Concept(s)
    ConceptSchema sniffSchema = new ConceptSchema(SNIFF);
    add(sniffSchema, jade.tools.ascml.onto.Sniff.class);
    ConceptSchema functionalSchema = new ConceptSchema(FUNCTIONAL);
    add(functionalSchema, jade.tools.ascml.onto.Functional.class);
    ConceptSchema knownSchema = new ConceptSchema(KNOWN);
    add(knownSchema, jade.tools.ascml.onto.Known.class);
    ConceptSchema societyTypeSchema = new ConceptSchema(SOCIETYTYPE);
    add(societyTypeSchema, jade.tools.ascml.onto.SocietyType.class);
    ConceptSchema statusSchema = new ConceptSchema(STATUS);
    add(statusSchema, jade.tools.ascml.onto.Status.class);
    ConceptSchema benchmarkSchema = new ConceptSchema(BENCHMARK);
    add(benchmarkSchema, jade.tools.ascml.onto.Benchmark.class);
    ConceptSchema agentTypeSchema = new ConceptSchema(AGENTTYPE);
    add(agentTypeSchema, jade.tools.ascml.onto.AgentType.class);
    ConceptSchema logSchema = new ConceptSchema(LOG);
    add(logSchema, jade.tools.ascml.onto.Log.class);
    ConceptSchema toolOptionSchema = new ConceptSchema(TOOLOPTION);
    add(toolOptionSchema, jade.tools.ascml.onto.ToolOption.class);
    ConceptSchema errorSchema = new ConceptSchema(ERROR);
    add(errorSchema, jade.tools.ascml.onto.Error.class);
    ConceptSchema introspectSchema = new ConceptSchema(INTROSPECT);
    add(introspectSchema, jade.tools.ascml.onto.Introspect.class);
    ConceptSchema stoppingSchema = new ConceptSchema(STOPPING);
    add(stoppingSchema, jade.tools.ascml.onto.Stopping.class);
    ConceptSchema agentInstanceSchema = new ConceptSchema(AGENTINSTANCE);
    add(agentInstanceSchema, jade.tools.ascml.onto.AgentInstance.class);
    ConceptSchema societyInstanceSchema = new ConceptSchema(SOCIETYINSTANCE);
    add(societyInstanceSchema, jade.tools.ascml.onto.SocietyInstance.class);
    ConceptSchema nonFunctionalSchema = new ConceptSchema(NONFUNCTIONAL);
    add(nonFunctionalSchema, jade.tools.ascml.onto.NonFunctional.class);
    ConceptSchema unknownSchema = new ConceptSchema(UNKNOWN);
    add(unknownSchema, jade.tools.ascml.onto.Unknown.class);
    ConceptSchema absModelSchema = new ConceptSchema(ABSMODEL);
    add(absModelSchema, jade.tools.ascml.onto.AbsModel.class);
    ConceptSchema startingSchema = new ConceptSchema(STARTING);
    add(startingSchema, jade.tools.ascml.onto.Starting.class);
    ConceptSchema debugSchema = new ConceptSchema(DEBUG);
    add(debugSchema, jade.tools.ascml.onto.Debug.class);

    // adding AgentAction(s)
    AgentActionSchema startSchema = new AgentActionSchema(START);
    add(startSchema, jade.tools.ascml.onto.Start.class);
    AgentActionSchema stopSchema = new AgentActionSchema(STOP);
    add(stopSchema, jade.tools.ascml.onto.Stop.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    statusSchema.add(STATUS_DETAILEDSTATUS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    toolOptionSchema.add(TOOLOPTION_OPTIONS, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    absModelSchema.add(ABSMODEL_MODELSTATUS, statusSchema, ObjectSchema.OPTIONAL);
    absModelSchema.add(ABSMODEL_TOOLOPTIONS, toolOptionSchema, 0, ObjectSchema.UNLIMITED);
    absModelSchema.add(ABSMODEL_NAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    absModelSchema.add(ABSMODEL_CONFIG, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    startSchema.add(START_MODELS, absModelSchema, 1, ObjectSchema.UNLIMITED);
    stopSchema.add(STOP_MODELS, absModelSchema, 1, ObjectSchema.UNLIMITED);

    // adding name mappings
    storeSlotName("DetailedStatus", "jade.tools.ascml.onto.Status", "DetailedStatus");  
    storeSlotName("Options", "jade.tools.ascml.onto.ToolOption", "Options");  
    storeSlotName("ModelStatus", "jade.tools.ascml.onto.AbsModel", "ModelStatus");  
    storeSlotName("ToolOptions", "jade.tools.ascml.onto.AbsModel", "ToolOptions");  
    storeSlotName("Name", "jade.tools.ascml.onto.AbsModel", "Name");  
    storeSlotName("Config", "jade.tools.ascml.onto.AbsModel", "Config");  
    storeSlotName("Models", "jade.tools.ascml.onto.Start", "Models");  
    storeSlotName("Models", "jade.tools.ascml.onto.Stop", "Models");  

    // adding inheritance
    sniffSchema.addSuperSchema(toolOptionSchema);
    functionalSchema.addSuperSchema(statusSchema);
    knownSchema.addSuperSchema(statusSchema);
    societyTypeSchema.addSuperSchema(absModelSchema);
    benchmarkSchema.addSuperSchema(toolOptionSchema);
    agentTypeSchema.addSuperSchema(absModelSchema);
    logSchema.addSuperSchema(toolOptionSchema);
    errorSchema.addSuperSchema(statusSchema);
    introspectSchema.addSuperSchema(toolOptionSchema);
    stoppingSchema.addSuperSchema(statusSchema);
    agentInstanceSchema.addSuperSchema(absModelSchema);
    societyInstanceSchema.addSuperSchema(absModelSchema);
    nonFunctionalSchema.addSuperSchema(statusSchema);
    unknownSchema.addSuperSchema(statusSchema);
    startingSchema.addSuperSchema(statusSchema);
    debugSchema.addSuperSchema(toolOptionSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
